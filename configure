#! /bin/sh

# Removing space from IFS makes it much easier to support filenames
# with spaces. See http://www.dwheeler.com/essays/filenames-in-shell.html
# for gory details.
IFS="$(printf '\n\t')"

# Since we don't have space in IFS we use tab to separate things in lists
tab="$(printf '\t')"

# Set several defaults (optionally specified by the user in
# environemnt variables)
CC=${CC:-gcc}
CXX=${CXX:-g++}
CFLAGS=${CFLAGS:--O2}
CXXFLAGS=${CXXFLAGS:-\$(CFLAGS)}
LDFLAGS=${LDFLAGS:-}
XAPIAN_CONFIG=${XAPIAN_CONFIG:-xapian-config-1.1${tab}xapian-config}

# We don't allow the EMACS or GZIP Makefile variables inherit values
# from the environment as we do with CC and CXX above. The reason is
# that these names as environment variables have existing uses other
# than the program name that we want. (EMACS is set to 't' when a
# shell is running within emacs and GZIP specifies arguments to pass
# on the gzip command line).

# Set the defaults for values the user can specify with command-line
# options.
PREFIX=/usr/local
LIBDIR=

usage ()
{
    cat <<EOF
Usage: ./configure [options]...

This script configures notmuch to build on your system.

It verifies that dependencies are available, determines flags needed
to compile and link against various required libraries, and identifies
whether various system functions can be used or if locally-provided
replacements will be built instead.

Finally, it allows you to control various aspects of the build and
installation process.

First, some common variables can specified via environment variables:

	CC		The C compiler to use
	CFLAGS		Flags to pass to the C compiler
	CXX		The C++ compiler to use
	CXXFLAGS	Flags to pass to the C compiler
	LDFLAGS		Flags to pass when linking

Each of these values can further be controlled by specifying them
later on the "make" command line.

Other environment variables can be used to control configure itself,
(and for which there is no equivalent build-time control):

	XAPIAN_CONFIG	The program to use to determine flags for
			compiling and linking against the Xapian
			library. [$XAPIAN_CONFIG]

Additionally, various options can be specified on the configure
command line.

	--prefix=PREFIX	Install files in PREFIX [$PREFIX]

By default, "make install" will install the resulting program to
$PREFIX/bin, documentation to $PREFIX/man, etc. You can
specify an installation prefix other than $PREFIX using
--prefix, for instance:

	./configure --prefix=\$HOME

Fine tuning of some installation directories is available:

	--libdir=DIR		Install libraries to DIR [PREFIX/lib]
	--includedir=DIR	Install header files to DIR [PREFIX/include]
	--mandir=DIR		Install man pages to DIR [PREFIX/share/man]
	--sysconfdir=DIR	Read-only single-machine data [PREFIX/etc]
	--emacslispdir=DIR	Emacs code [PREFIX/share/emacs/site-lisp]

Additional options are accepted for compatibility with other
configure-script calling conventions, but don't do anything yet:

	--build=<cpu>-<vendor>-<os>	Currently ignored
	--host=<cpu>-<vendor>-<os>	Currently ignored
	--infodir=DIR			Currently ignored
	--datadir=DIR			Currently ignored
	--localstatedir=DIR		Currently ignored
	--libexecdir=DIR		Currently ignored
	--disable-maintainer-mode	Currently ignored
	--disable-dependency-tracking	Currently ignored

EOF
}

# Parse command-line options
for option; do
    if [ "${option}" = '--help' ] ; then
	usage
	exit 0
    elif [ "${option%%=*}" = '--prefix' ] ; then
	PREFIX="${option#*=}"
    elif [ "${option%%=*}" = '--libdir' ] ; then
	LIBDIR="${option#*=}"
    elif [ "${option%%=*}" = '--includedir' ] ; then
	INCLUDEDIR="${option#*=}"
    elif [ "${option%%=*}" = '--mandir' ] ; then
	MANDIR="${option#*=}"
    elif [ "${option%%=*}" = '--sysconfdir' ] ; then
	SYSCONFDIR="${option#*=}"
    elif [ "${option%%=*}" = '--emacslispdir' ] ; then
	EMACSLISPDIR="${option#*=}"
    elif [ "${option%%=*}" = '--build' ] ; then
	build_option="${option#*=}"
	case ${build_option} in
	    *-*-*) ;;
	    *)
		echo "Unrecognized value for --build option: ${build_option}"
		echo "Should be: <cpu>-<vendor>-<os>"
		echo "See:"
		echo "	$0 --help"
		echo ""
		exit 1
	esac
	build_cpu=${build_option%%-*}
	build_option=${build_option#*-}
	build_vendor=${build_option%%-*}
	build_os=${build_option#*-}
    elif [ "${option%%=*}" = '--host' ] ; then
	host_option="${option#*=}"
	case ${host_option} in
	    *-*-*) ;;
	    *)
		echo "Unrecognized value for --host option: ${host_option}"
		echo "Should be: <cpu>-<vendor>-<os>"
		echo "See:"
		echo "	$0 --help"
		echo ""
		exit 1
	esac
	host_cpu=${host_option%%-*}
	host_option=${host_option#*-}
	host_vendor=${host_option%%-*}
	host_os=${host_option#*-}
    elif [ "${option%%=*}" = '--infodir' ] ; then
	true
    elif [ "${option%%=*}" = '--datadir' ] ; then
	true
    elif [ "${option%%=*}" = '--localstatedir' ] ; then
	true
    elif [ "${option%%=*}" = '--libexecdir' ] ; then
	true
    elif [ "${option}" = '--disable-maintainer-mode' ] ; then
	true
    elif [ "${option}" = '--disable-dependency-tracking' ] ; then
	true
    else
	echo "Unrecognized option: ${option}"
	echo "See:"
	echo "	$0 --help"
	echo ""
	exit 1
    fi
done

# We set this value early, (rather than just while printing the
# Makefile.config file later like most values), because we need to
# actually investigate this value compared to the ldconfig_paths value
# below.
libdir_expanded=${LIBDIR:-${PREFIX}/lib}

cat <<EOF
Welcome to Notmuch, a system for indexing, searching and tagging your email.

We hope that the process of building and installing notmuch is quick
and smooth so that you can soon be reading and processing your email
more efficiently than ever.

If anything goes wrong in the configure process, you can override any
decisions it makes by manually editing the Makefile.config file that
it creates. Also please do as much as you can to figure out what could
be different on your machine compared to those of the notmuch
developers. Then, please email those details to the Notmuch list
(notmuch@notmuchmail.org) so that we can hopefully make future
versions of notmuch easier for you to use.

We'll now investigate your system to verify that all required
dependencies are available:

EOF

errors=0

if pkg-config --version > /dev/null 2>&1; then
    have_pkg_config=1
else
    have_pkg_config=0
fi

printf "Checking for Xapian development files... "
have_xapian=0
for xapian_config in ${XAPIAN_CONFIG}; do
    if ${xapian_config} --version > /dev/null 2>&1; then
	printf "Yes (%s).\n" $(${xapian_config} --version | sed -e 's/.* //')
	have_xapian=1
	xapian_cxxflags=$(${xapian_config} --cxxflags)
	xapian_ldflags=$(${xapian_config} --libs)
	break
    fi
done
if [ ${have_xapian} = "0" ]; then
    printf "No.\n"
    errors=$((errors + 1))
fi

printf "Checking for GMime development files... "
have_gmime=0
for gmimepc in gmime-2.6 gmime-2.4; do
    if pkg-config --modversion $gmimepc > /dev/null 2>&1; then
	printf "Yes ($gmimepc).\n"
	have_gmime=1
	gmime_cflags=$(pkg-config --cflags $gmimepc)
	gmime_ldflags=$(pkg-config --libs $gmimepc)
    fi
done
if [ "$have_gmime" = "0" ]; then
    printf "No.\n"
    errors=$((errors + 1))
fi

printf "Checking for talloc development files... "
if pkg-config --modversion talloc > /dev/null 2>&1; then
    printf "Yes.\n"
    have_talloc=1
    talloc_cflags=$(pkg-config --cflags talloc)
    talloc_ldflags=$(pkg-config --libs talloc)
else
    printf "No.\n"
    have_talloc=0
    talloc_cflags=
    errors=$((errors + 1))
fi

printf "Checking for valgrind development files... "
if pkg-config --modversion valgrind > /dev/null 2>&1; then
    printf "Yes.\n"
    have_valgrind=1
    valgrind_cflags=$(pkg-config --cflags valgrind)
else
    printf "No (but that's fine).\n"
    have_valgrind=0
fi

if [ -z "${EMACSLISPDIR}" ]; then
    if pkg-config --modversion emacs > /dev/null 2>&1; then
	EMACSLISPDIR=$(pkg-config emacs --variable sitepkglispdir)
    else
	EMACSLISPDIR='$(prefix)/share/emacs/site-lisp'
    fi
fi

printf "Checking if emacs is available... "
if emacs --quick --batch > /dev/null 2>&1; then
    printf "Yes.\n"
    have_emacs=1
else
    printf "No (so will not byte-compile emacs code)\n"
    have_emacs=0
fi

libdir_in_ldconfig=0

printf "Checking which platform we are on... "
if [ `uname` = "Darwin" ] ; then
    printf "Mac OS X.\n"
    platform=MACOSX
    linker_resolves_library_dependencies=0
elif [ `uname` = "SunOS" ] ; then
    printf "Solaris.\n"
    platform=SOLARIS
    linker_resolves_library_dependencies=0
elif [ `uname` = "Linux" ] ; then
    printf "Linux\n"
    platform=LINUX
    linker_resolves_library_dependencies=1
    ldconfig_paths=$(/sbin/ldconfig -N -X -v 2>/dev/null | sed -n -e 's,^\(/.*\):\( (.*)\)\?$,\1,p')
    for path in $ldconfig_paths; do
	echo "Checking $path compared to $libdir_expanded"
	if [ "$path" = "$libdir_expanded" ]; then
	    libdir_in_ldconfig=1
	fi
    done
else
    printf "Unknown.\n"
    cat <<EOF

*** Warning: Unknown platform. Notmuch might or might not build correctly.

EOF
fi

if [ $errors -gt 0 ]; then
    cat <<EOF

*** Error: The dependencies of notmuch could not be satisfied. You will
need to install the following packages before being able to compile
notmuch:

EOF
    if [ $have_xapian -eq 0 ]; then
	echo "	Xapian library (including development files such as headers)"
	echo "	http://xapian.org/"
    fi
    if [ $have_gmime -eq 0 ]; then
	echo "	GMime 2.4 library (including development files such as headers)"
	echo "	http://spruce.sourceforge.net/gmime/"
    fi
    if [ $have_talloc -eq 0 ]; then
	echo "	The talloc library (including development files such as headers)"
	echo "	http://talloc.samba.org/"
    fi
    cat <<EOF

With any luck, you're using a modern, package-based operating system
that has all of these packages available in the distribution. In that
case a simple command will install everything you need. For example:

On Debian and similar systems:

	sudo apt-get install libxapian-dev libgmime-2.4-dev libtalloc-dev

Or on Fedora and similar systems:

	sudo yum install xapian-core-devel gmime-devel libtalloc-devel

On other systems, similar commands can be used, but the details of the
package names may be different.

EOF
    if [ $have_pkg_config -eq 0 ]; then
cat <<EOF
Note: the pkg-config program is not available. This configure script
uses pkg-config to find the compilation flags required to link against
the various libraries needed by notmuch. It's possible you simply need
to install pkg-config with a command such as:

	sudo apt-get install pkg-config
Or:
	sudo yum install pkgconfig

But if pkg-config is not available for your system, then you will need
to modify the configure script to manually set the cflags and ldflags
variables to the correct values to link against each library in each
case that pkg-config could not be used to determine those values.

EOF
    fi
cat <<EOF
When you have installed the necessary dependencies, you can run
configure again to ensure the packages can be found, or simply run
"make" to compile notmuch.

EOF
    exit 1
fi

printf "Checking for getline... "
if ${CC} -o compat/have_getline compat/have_getline.c > /dev/null 2>&1
then
    printf "Yes.\n"
    have_getline=1
else
    printf "No (will use our own instead).\n"
    have_getline=0
fi
rm -f compat/have_getline

printf "Checking for strcasestr... "
if ${CC} -o compat/have_strcasestr compat/have_strcasestr.c > /dev/null 2>&1
then
    printf "Yes.\n"
    have_strcasestr=1
else
    printf "No (will use our own instead).\n"
    have_strcasestr=0
fi
rm -f compat/have_strcasestr

cat <<EOF

All required packages were found. You may now run the following
commands to compile and install notmuch:

	make
	sudo make install

EOF

# construct the Makefile.config
cat > Makefile.config <<EOF
# This Makefile.config was automatically generated by the ./configure
# script of notmuch. If the configure script identified anything
# incorrectly, then you can edit this file to try to correct things,
# but be warned that if configure is run again it will destroy your
# changes, (and this could happen by simply calling "make" if the
# configure script is updated).

# The C compiler to use
CC = ${CC}

# The C++ compiler to use
CXX = ${CXX}

# Command to execute emacs from Makefiles
EMACS = emacs --quick

# Default FLAGS for C compiler (can be overridden by user such as "make CFLAGS=-g")
CFLAGS = ${CFLAGS}

# Default FLAGS for C++ compiler (can be overridden by user such as "make CXXFLAGS=-g")
CXXFLAGS = ${CXXFLAGS}

# Default FLAGS for the linker (can be overridden by user such as "make LDFLAGS=-znow")
LDFLAGS = ${LDFLAGS}

# Flags to enable warnings when using the C++ compiler
WARN_CXXFLAGS=-Wall -Wextra -Wwrite-strings -Wswitch-enum

# Flags to enable warnings when using the C compiler
WARN_CFLAGS=\$(WARN_CXXFLAGS) -Wmissing-declarations

# The prefix to which notmuch should be installed
# Note: If you change this value here, be sure to ensure that the
# LIBDIR_IN_LDCONFIG value below is still set correctly.
prefix = ${PREFIX}

# The directory to which libraries should be installed
# Note: If you change this value here, be sure to ensure that the
# LIBDIR_IN_LDCONFIG value below is still set correctly.
libdir = ${LIBDIR:=\$(prefix)/lib}

# Whether libdir is in a path configured into ldconfig
LIBDIR_IN_LDCONFIG = ${libdir_in_ldconfig}

# The directory to which header files should be installed
includedir = ${INCLUDEDIR:=\$(prefix)/include}

# The directory to which man pages should be installed
mandir = ${MANDIR:=\$(prefix)/share/man}

# The directory to which read-only (configuration) filesshould be installed
sysconfdir = ${SYSCONFDIR:=\$(prefix)/etc}

# The directory to which emacs lisp files should be installed
emacslispdir=${EMACSLISPDIR}

# Whether there's an emacs binary available for byte-compiling
HAVE_EMACS = ${have_emacs}

# The directory to which desktop files should be installed
desktop_dir = \$(prefix)/share/applications

# The directory to which bash completions files should be installed
bash_completion_dir = \$(prefix)/share/bash-completion

# The directory to which zsh completions files should be installed
zsh_completion_dir = \$(prefix)/share/zsh/functions/Completion/Unix

# Whether the getline function is available (if not, then notmuch will
# build its own version)
HAVE_GETLINE = ${have_getline}

# Whether the strcasestr function is available (if not, then notmuch will
# build its own version)
HAVE_STRCASESTR = ${have_strcasestr}

# Supported platforms (so far) are: LINUX, MACOSX, SOLARIS
PLATFORM = ${platform}

# Whether the linker will automatically resolve the dependency of one
# library on another (if not, then linking a binary requires linking
# directly against both)
LINKER_RESOLVES_LIBRARY_DEPENDENCIES = ${linker_resolves_library_dependencies}

# Flags needed to compile and link against Xapian
XAPIAN_CXXFLAGS = ${xapian_cxxflags}
XAPIAN_LDFLAGS = ${xapian_ldflags}

# Flags needed to compile and link against GMime-2.4
GMIME_CFLAGS = ${gmime_cflags}
GMIME_LDFLAGS = ${gmime_ldflags}

# Flags needed to compile and link against talloc
TALLOC_CFLAGS = ${talloc_cflags}
TALLOC_LDFLAGS = ${talloc_ldflags}

# Whether valgrind header files are available
HAVE_VALGRIND = ${have_valgrind}

# And if so, flags needed at compile time for valgrind macros
VALGRIND_CFLAGS = ${valgrind_cflags}

# Combined flags for compiling and linking against all of the above
CONFIGURE_CFLAGS = -DHAVE_GETLINE=\$(HAVE_GETLINE) \$(GMIME_CFLAGS)      \\
		   \$(TALLOC_CFLAGS) -DHAVE_VALGRIND=\$(HAVE_VALGRIND)   \\
		   \$(VALGRIND_CFLAGS) -DHAVE_STRCASESTR=\$(HAVE_STRCASESTR)
CONFIGURE_CXXFLAGS = -DHAVE_GETLINE=\$(HAVE_GETLINE) \$(GMIME_CFLAGS)    \\
		     \$(TALLOC_CFLAGS) -DHAVE_VALGRIND=\$(HAVE_VALGRIND) \\
		     \$(VALGRIND_CFLAGS) \$(XAPIAN_CXXFLAGS)             \\
                     -DHAVE_STRCASESTR=\$(HAVE_STRCASESTR)
CONFIGURE_LDFLAGS =  \$(GMIME_LDFLAGS) \$(TALLOC_LDFLAGS) \$(XAPIAN_LDFLAGS)
EOF
